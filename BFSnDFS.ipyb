{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO6ThCpb/notozWiFAzVxWr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fV6ljZHh37tU","executionInfo":{"status":"ok","timestamp":1676362869117,"user_tz":-360,"elapsed":1034,"user":{"displayName":"practice mail","userId":"06508995652078518176"}},"outputId":"47dc2097-cb5e-444b-fcb9-2b1e0dd44d77"},"outputs":[{"output_type":"stream","name":"stdout","text":["1 2 0 3 "]}],"source":["graph = {\n","  '0' : ['0','2'],\n","  '1' : ['2'],\n","  '2' : ['0','3'],\n","  '3' : [],\n","  \n","}\n","\n","visited = [] \n","queue = [] \n","\n","def bfs(visited, graph, node):\n","  visited.append(node)\n","  queue.append(node)\n","\n","  while queue:\n","    s = queue.pop(0) \n","    print (s, end = \" \") \n","\n","    for neighbour in graph[s]:\n","      if neighbour not in visited:\n","        visited.append(neighbour)\n","        queue.append(neighbour)\n","\n","# Driver Code\n","bfs(visited, graph, '1')"]},{"cell_type":"code","source":["\n","import collections\n","\n","def bfs(graph, root):\n","\n","    visited, queue = set(), collections.deque([root])\n","    visited.add(root)\n","\n","    while queue:\n","\n","        # Dequeue a vertex from queue\n","        vertex = queue.popleft()\n","        print(str(vertex) + \" \", end=\" \")\n","\n","        # If not visited, mark it as visited, and\n","        # enqueue it\n","        for neighbour in graph[vertex]:\n","            if neighbour not in visited:\n","                visited.add(neighbour)\n","                queue.append(neighbour)\n","\n","\n","if __name__ == '__main__':\n","    graph = {0: [1, 2], 1: [2], 2: [3], 3: [1, 2]}\n","    print(\"Following is Breadth First Traversal: \")\n","    bfs(graph, 0)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wNtiyYxPILkl","executionInfo":{"status":"ok","timestamp":1676364961226,"user_tz":-360,"elapsed":373,"user":{"displayName":"practice mail","userId":"06508995652078518176"}},"outputId":"4dc9ebdf-1f12-4ab5-c0dd-968095e78bfa"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Following is Breadth First Traversal: \n","0  1  2  3  "]}]},{"cell_type":"code","source":["\n","from collections import defaultdict\n","\n","class Graph:\n","\n","\tdef __init__(self):\n","\n","\t\tself.graph = defaultdict(list)\n","\n","\tdef addEdge(self, u, v):\n","\t\tself.graph[u].append(v)\n","\n","\t# Function to print a BFS of graph\n","\tdef BFS(self, s):\n","\n","\t\t# Mark all the vertices as not visited\n","\t\tvisited = [False] * (max(self.graph) + 1)\n","\n","\n","\t\tqueue = []\n","\n","\t\t# Mark the source node as\n","\t\t# visited and enqueue it\n","\t\tqueue.append(s)\n","\t\tvisited[s] = True\n","\n","\t\twhile queue:\n","\n","\t\t\t# Dequeue a vertex from\n","\t\t\t# queue and print it\n","\t\t\ts = queue.pop(0)\n","\t\t\tprint(s, end=\" \")\n","\n","\t\t\t# has not been visited, then mark it\n","\t\t\t# visited and enqueue it\n","\t\t\tfor i in self.graph[s]:\n","\t\t\t\tif visited[i] == False:\n","\t\t\t\t\tqueue.append(i)\n","\t\t\t\t\tvisited[i] = True\n","\n","\n","# Driver code\n","\n","g = Graph()\n","g.addEdge(2, 0)\n","g.addEdge(0, 2)\n","g.addEdge(0, 1)\n","g.addEdge(1, 2)\n","g.addEdge(2, 3)\n","g.addEdge(3, 3)\n","\n","print(\"Following is Breadth First Traversal (starting from vertex 1)\")\n","g.BFS(1)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F83iHrgkD_mJ","executionInfo":{"status":"ok","timestamp":1676365265662,"user_tz":-360,"elapsed":17,"user":{"displayName":"practice mail","userId":"06508995652078518176"}},"outputId":"02ea4a2c-1f90-4859-d770-5be53139a868"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Following is Breadth First Traversal (starting from vertex 2)\n","1 2 0 3 "]}]},{"cell_type":"code","source":["from collections import defaultdict\n","\n","class Graph:\n","    def __init__(self):\n","        self.graph = defaultdict(list)\n","\n","    def add_edge(self, u, v):\n","        self.graph[u].append(v)\n","\n","    def bfs(self, start):\n","        visited = set()\n","        queue = [start]\n","\n","        while queue:\n","            node = queue.pop(0)\n","            if node not in visited:\n","                print(node, end=\" \")\n","                visited.add(node)\n","                for neighbor in self.graph[node]:\n","                    if neighbor not in visited:\n","                        queue.append(neighbor)\n","\n","g = Graph()\n","num_edges = int(input(\"Enter the number of edges: \"))\n","\n","for i in range(num_edges):\n","    u, v = input(\"Enter edge (u, v): \").split(',')\n","    g.add_edge(u, v)\n","\n","start_node = input(\" starting node  ?  : \")\n","\n","print(\"BFS traversal starting from node\", start_node, \":\")\n","g.bfs(start_node)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ipqM6xewJ_XS","executionInfo":{"status":"ok","timestamp":1676367414481,"user_tz":-360,"elapsed":83231,"user":{"displayName":"practice mail","userId":"06508995652078518176"}},"outputId":"d1a483c1-ff01-46c0-c7c3-601b65f2f1b3"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number of edges: 6\n","Enter edge (u, v): 2,0\n","Enter edge (u, v): 0,2\n","Enter edge (u, v): 0,1\n","Enter edge (u, v): 1,2\n","Enter edge (u, v): 2,3\n","Enter edge (u, v): 3,3\n"," starting node  ?  : 2\n","BFS traversal starting from node 2 :\n","2 0 3 1 "]}]}]}